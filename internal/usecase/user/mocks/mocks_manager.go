// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/colmmurphy91/muzz/internal/adapter/mysql/user/model"
	entity "github.com/colmmurphy91/muzz/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockuserCreator is a mock of userCreator interface.
type MockuserCreator struct {
	ctrl     *gomock.Controller
	recorder *MockuserCreatorMockRecorder
}

// MockuserCreatorMockRecorder is the mock recorder for MockuserCreator.
type MockuserCreatorMockRecorder struct {
	mock *MockuserCreator
}

// NewMockuserCreator creates a new mock instance.
func NewMockuserCreator(ctrl *gomock.Controller) *MockuserCreator {
	mock := &MockuserCreator{ctrl: ctrl}
	mock.recorder = &MockuserCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserCreator) EXPECT() *MockuserCreatorMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockuserCreator) CreateUser(ctx context.Context, user model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockuserCreatorMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockuserCreator)(nil).CreateUser), ctx, user)
}

// MockuserIndexer is a mock of userIndexer interface.
type MockuserIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockuserIndexerMockRecorder
}

// MockuserIndexerMockRecorder is the mock recorder for MockuserIndexer.
type MockuserIndexerMockRecorder struct {
	mock *MockuserIndexer
}

// NewMockuserIndexer creates a new mock instance.
func NewMockuserIndexer(ctrl *gomock.Controller) *MockuserIndexer {
	mock := &MockuserIndexer{ctrl: ctrl}
	mock.recorder = &MockuserIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserIndexer) EXPECT() *MockuserIndexerMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockuserIndexer) Index(ctx context.Context, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockuserIndexerMockRecorder) Index(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockuserIndexer)(nil).Index), ctx, user)
}
