// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/colmmurphy91/muzz/internal/adapter/mysql/user/model"
	gomock "github.com/golang/mock/gomock"
)

// MockuserFetcher is a mock of userFetcher interface.
type MockuserFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockuserFetcherMockRecorder
}

// MockuserFetcherMockRecorder is the mock recorder for MockuserFetcher.
type MockuserFetcherMockRecorder struct {
	mock *MockuserFetcher
}

// NewMockuserFetcher creates a new mock instance.
func NewMockuserFetcher(ctrl *gomock.Controller) *MockuserFetcher {
	mock := &MockuserFetcher{ctrl: ctrl}
	mock.recorder = &MockuserFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserFetcher) EXPECT() *MockuserFetcherMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockuserFetcher) FindByEmail(ctx context.Context, email string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockuserFetcherMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockuserFetcher)(nil).FindByEmail), ctx, email)
}
