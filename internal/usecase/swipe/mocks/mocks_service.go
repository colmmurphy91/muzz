// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/colmmurphy91/muzz/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// Mockswiper is a mock of swiper interface.
type Mockswiper struct {
	ctrl     *gomock.Controller
	recorder *MockswiperMockRecorder
}

// MockswiperMockRecorder is the mock recorder for Mockswiper.
type MockswiperMockRecorder struct {
	mock *Mockswiper
}

// NewMockswiper creates a new mock instance.
func NewMockswiper(ctrl *gomock.Controller) *Mockswiper {
	mock := &Mockswiper{ctrl: ctrl}
	mock.recorder = &MockswiperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockswiper) EXPECT() *MockswiperMockRecorder {
	return m.recorder
}

// GetUsersYesSwipes mocks base method.
func (m *Mockswiper) GetTargetsYesSwipes(ctx context.Context, userID int) (map[int]entity.Swipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetsYesSwipes", ctx, userID)
	ret0, _ := ret[0].(map[int]entity.Swipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersYesSwipes indicates an expected call of GetUsersYesSwipes.
func (mr *MockswiperMockRecorder) GetUsersYesSwipes(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetsYesSwipes", reflect.TypeOf((*Mockswiper)(nil).GetTargetsYesSwipes), ctx, userID)
}

// SaveSwipe mocks base method.
func (m *Mockswiper) SaveSwipe(ctx context.Context, swipe entity.Swipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSwipe", ctx, swipe)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSwipe indicates an expected call of SaveSwipe.
func (mr *MockswiperMockRecorder) SaveSwipe(ctx, swipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSwipe", reflect.TypeOf((*Mockswiper)(nil).SaveSwipe), ctx, swipe)
}

// Mockmatcher is a mock of matcher interface.
type Mockmatcher struct {
	ctrl     *gomock.Controller
	recorder *MockmatcherMockRecorder
}

// MockmatcherMockRecorder is the mock recorder for Mockmatcher.
type MockmatcherMockRecorder struct {
	mock *Mockmatcher
}

// NewMockmatcher creates a new mock instance.
func NewMockmatcher(ctrl *gomock.Controller) *Mockmatcher {
	mock := &Mockmatcher{ctrl: ctrl}
	mock.recorder = &MockmatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmatcher) EXPECT() *MockmatcherMockRecorder {
	return m.recorder
}

// CreateMatch mocks base method.
func (m *Mockmatcher) CreateMatch(ctx context.Context, match entity.Match) (entity.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatch", ctx, match)
	ret0, _ := ret[0].(entity.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatch indicates an expected call of CreateMatch.
func (mr *MockmatcherMockRecorder) CreateMatch(ctx, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatch", reflect.TypeOf((*Mockmatcher)(nil).CreateMatch), ctx, match)
}
